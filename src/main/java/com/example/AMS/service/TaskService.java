package com.example.AMS.service;

import com.example.AMS.Priority;
import com.example.AMS.exception.IncompleteBodyException;
import com.example.AMS.model.Task;
import com.example.AMS.exception.NoSuchDataException;
import org.springframework.stereotype.Service;
import redis.clients.jedis.JedisPooled;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class TaskService {
    private final JedisPooled jedisPooled;

    public TaskService(JedisPooled jedisPooled) {
        this.jedisPooled = jedisPooled;
    }

    // Add task - CREATE
    public void addTask(String courseId, Task task) {
        Map<String, String> taskDetail = new HashMap<>();
        if (courseId != null && !courseId.isEmpty() && task.getTaskTitle() != null && !task.getTaskTitle().isEmpty() && task.getDueDate() != null) {
            taskDetail.put("courseId", courseId);   // this will be set based on the URI courseId
            taskDetail.put("taskTitle", task.getTaskTitle());
            taskDetail.put("description", task.getDescription());
            taskDetail.put("dueDate", String.valueOf(task.getDueDate()));
            taskDetail.put("priority", String.valueOf(task.getPriority()));
            taskDetail.put("completed", String.valueOf(task.isCompleted()));

            // just in case if taskId is not generated by UUID
            if(task.getTaskId() == null) {
                task.generateTaskId();
            }
            String taskKey = "task:" + task.getTaskId();
            jedisPooled.hset(taskKey, taskDetail);
        } else {
            throw new IncompleteBodyException("Missing value in the field");
        }
    }

    // Get all tasks for a specific course
    public List<Task> getAllTasks(String courseId) {
        if(!jedisPooled.exists("course:"+courseId)) {
            throw new NoSuchDataException(courseId);
        }
        List<Task> allTasks = new ArrayList<>();

        for (String prefixedTaskId : jedisPooled.keys("task:task*")) {
            Map<String, String> task = jedisPooled.hgetAll(prefixedTaskId);

            if (task.get("courseId") != null && task.get("courseId").equals(courseId)) {
                String taskId = prefixedTaskId.replace("task:","");
                Task eachTask = new Task(
                        taskId,
                        task.get("taskTitle"),
                        task.get("description"),
                        LocalDate.parse(task.get("dueDate")),
                        Priority.valueOf(task.get("priority")),
                        Boolean.parseBoolean(task.get("completed"))
                );
                eachTask.setCourseId(task.get("courseId"));
                allTasks.add(eachTask);
            }
        }
        return allTasks;
    }

    // READ a task by ID
    public Task getTask(String taskId) {
        if (!jedisPooled.exists("task:"+taskId)) {
            throw new NoSuchDataException(taskId);
        }
        Map<String, String> task = jedisPooled.hgetAll("task:"+taskId);

        Task fetchedTask = new Task(
                taskId,
                task.get("taskTitle"),
                task.get("description"),
                LocalDate.parse(task.get("dueDate")),
                Priority.valueOf(task.get("priority")),
                Boolean.parseBoolean(task.get("completed"))
        );
        fetchedTask.setCourseId(task.get("courseId"));

        return fetchedTask;
    }

    // DELETE a task
    public void deleteTask(String taskId) {
        if(!jedisPooled.exists("task:"+taskId)) {
            throw new NoSuchDataException(taskId);
        }
        jedisPooled.del("task:"+taskId);
    }

    // UPDATE a task
    public void updateTask(String taskId, String courseId, Task updatedTask) {
        if(!jedisPooled.exists("course:"+courseId)) {
            throw new NoSuchDataException(courseId);
        }

        if (!jedisPooled.exists("task:"+taskId)) {
            throw new NoSuchDataException(taskId);
        }

        Map<String, String> updatedTaskDetail = new HashMap<>();
        if(!courseId.isEmpty() && !updatedTask.getTaskTitle().isEmpty() && updatedTask.getTaskTitle() != null && updatedTask.getDueDate() != null && !String.valueOf(updatedTask.isCompleted()).isEmpty()) {
            updatedTaskDetail.put("courseId", courseId);    // the courseId will be set based on the argument
            updatedTaskDetail.put("taskTitle", updatedTask.getTaskTitle());
            updatedTaskDetail.put("description", updatedTask.getDescription());
            updatedTaskDetail.put("dueDate", String.valueOf(updatedTask.getDueDate()));
            updatedTaskDetail.put("priority", String.valueOf(updatedTask.getPriority()));
            updatedTaskDetail.put("completed", String.valueOf(updatedTask.isCompleted()));

            jedisPooled.hset("task:"+taskId, updatedTaskDetail);
        }
    }
}
